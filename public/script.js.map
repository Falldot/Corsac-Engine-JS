{
  "version": 3,
  "sources": ["../src/core/utils/SparseSet.js", "../src/core/ecs/group.js", "../src/core/utils/IdCounter.js", "../src/core/utils/Types.js", "../src/core/ecs/ecs.js", "../src/corsac-engine.js"],
  "sourcesContent": ["module.exports = class SparseSet {\n    constructor() {\n        this._packed = new Array();\n        this._sparse = new Array();\n    }\n\n    Has(x) {\n        return this._sparse[x] < this._packed.length && this._packed[this._sparse[x]] == x;\n    }\n\n    Add(x) {\n        if (this.Has(x)) return; //throw new Error('This number is already contained! =>  ' + x);\n            this._sparse[x] = this._packed.length;\n            this._packed.push(x);\n    }\n\n    Remove(x) {\n        if (!this.Has(x)) return; //throw new Error('This number is not contained! =>' + x);\n            const last = this._packed.pop();\n            if (x === last) return;\n                this._sparse[last] = this._sparse[x];\n                this._packed[this._sparse[x]] = last;\n    }\n};", "const SparseSet = require(\"../utils/SparseSet\");\r\n\r\nclass Group {\r\n    constructor(components) {\r\n        this._set = new SparseSet();\r\n        this._parents = Array();\r\n        this._components = components;\r\n    }\r\n\r\n    _add(id) {\r\n        this._set.Add(id);\r\n        for (let i = 0; i < this._parents.length; i++) {\r\n            this._parents[i]._add(id);\r\n        }\r\n    }\r\n\r\n    Extends(...groups) {\r\n        for (let i = 0; i < groups.length; i++) {\r\n            this._parents.push(groups[i]);\r\n            for (let a = 0; a < groups[i]._components.length; a++) {\r\n                let equel = true;\r\n                for (let c = 0; c < this._components.length; c++) {\r\n                    if (groups[i]._components[a] === this._components[c]) equel = false;\r\n                }\r\n                if (equel) this._components.push(groups[i]._components[a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _remove(id) {\r\n        this._set.Remove(id);\r\n        for (let i = 0; i < this._parents.length; i++) {\r\n            this._parents[i]._remove(id);\r\n        }\r\n    }\r\n}\r\n\r\nclass Unique {\r\n    constructor(id, components) {\r\n        this._set = {\r\n            _packed: id\r\n        };\r\n        this._components = components;\r\n        this._parents = Array();\r\n    }\r\n\r\n    Extends(...groups) {\r\n        for (let i = 0; i < groups.length; i++) {\r\n            this._parents.push(groups[i]);\r\n            groups[i]._add(this._set._packed);\r\n            for (let a = 0; a < groups[i]._components.length; a++) {\r\n                let equel = true;\r\n                for (let c = 0; c < this._components.length; c++) {\r\n                    if (groups[i]._components[a] === this._components[c]) equel = false;\r\n                }\r\n                if (equel) this._components.push(groups[i]._components[a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    Group, Unique\r\n};", "module.exports = class IdCounter {\n    constructor(maxIdCount) {\n        this._count = 0;\n        this._pool = new Array();\n        this._max = maxIdCount;\n    }\n\n    Size() {\n        return this._max;\n    }\n\n    Put(id) {\n        this._pool.push(id);\n    }\n\n    Pop() {\n        return this._pool.length === 0 ? this._create() : this._pool.pop();\n    }\n\n    _create() {\n        if (this._max <= this._count) throw new Error('Been hitting the limit! => ' + this._max);\n            return this._count++;\n    }\n};", "const types = {\n    any: Array,\n    int8: Int8Array,\n    uint8: Uint8Array,\n    int16: Int16Array,\n    uint16: Uint16Array,\n    int32: Int32Array,\n    uint32: Uint32Array,\n    float32: Float32Array,\n    float64: Float64Array,\n};\n\nconst TypeContainer = (type, size) => {\n    if (typeof type === \"object\") {\n        for (const key in type) type[key] = new type[key](size);\n        return type;\n    } else if (typeof type === \"function\") {\n        return new type(size);\n    } else {\n        throw new Error('Invalid type format! => ' + type);\n    }\n};\n\nmodule.exports = {\n    types, TypeContainer\n};", "const {Group, Unique} = require(\"./group.js\");\n\n//utils\nconst IdCounter = require(\"../utils/IdCounter\");\nconst {TypeContainer} = require('../utils/Types');\n\nmodule.exports = class ECS {\n    constructor(max = 1e4) {\n        this._entities = new IdCounter(max);\n    }\n\n    CreateComponent(type) {\n        return TypeContainer(type, this._entities.Size());\n    }\n\n    CreateGroup(...components) {\n        return new Group(components);\n    }\n\n    CreateUniqueEntity(...components) {\n        return new Unique(this._entities.Pop(), components);\n    }\n\n    CreateEntity(...groups) {\n        const id = this._entities.Pop();\n        for (let i = 0; i < groups.length; i++) {\n            groups[i]._add(id);\n        }\n        return this;\n    }\n\n    RemoveEntity(id, ...groups) {\n        for (let i = 0; i < groups.length; i++) {\n            groups[i]._remove(id);\n        }\n        this._entities.Put(id);\n        return this;\n    }\n\n    CreateSystem(group, callback) {\n        return () => {\n            callback(group._set._packed, ...group._components);\n        };\n    }\n};", "const ECS = require(\"#/ecs/ecs\");\nconst { types } = require(\"#/utils/Types\");\n\nconst ecs = new ECS();\n\nconst Position = ecs.CreateComponent(types.uint32);\nconst Direction = ecs.CreateComponent(types.uint32);\n\nconst Translate = ecs.CreateGroup(Position, Direction);\n\nconst Transform = ecs.CreateSystem(Translate, (entities, Pos) => {\n    entities.forEach(element => {\n        console.log(Pos[element]);\n    });\n});\n\necs.CreateEntity(Translate);\n\nconsole.log(\"hi\");\n\nTransform();\n"],
  "mappings": "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",
  "names": []
}
