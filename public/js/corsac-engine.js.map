{
  "version": 3,
  "sources": ["../../src/corsac-engine.js"],
  "sourcesContent": ["//const {ECS, types} = require(\"./ECS\");\n\nconst shader1 = require(\"./shader1.glsl\");\nconst shader2 = require(\"./shader2.glsl\");\n\nconst resize = canvas => {\n    const displayWidth = document.body.clientWidth;\n    const displayHeight = document.body.clientHeight;\n\n    if (canvas.width != displayWidth ||\n        canvas.height != displayHeight) {\n\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n    }\n};\n\nwindow.addEventListener(`resize`, () => {\n    resize(document.getElementById(\"root\"));\n}, false);\n\nconst createShader = (gl, type, source) => {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.log(\"error\");\n    gl.deleteShader(shader);\n};\n\nconst createProgram = (gl, vertexShader, fragmentShader) => {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.log(\"error\");\n    gl.deleteProgram(program);\n};\n\nconst main = () => {\n    const canvas = document.querySelector(\"#root\");\n    const gl = canvas.getContext(\"webgl\");\n    resize(canvas);\n\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, shader1);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, shader2);\n\n    const program = createProgram(gl, vertexShader, fragmentShader);\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    const resolutionUniformLocation = gl.getUniformLocation(program, \"u_resolution\");\n\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const xstart = 0;\n    const ystart = 0;\n    const xend = canvas.width;\n    const yend = canvas.height;\n\n    const positions = [\n        xstart, ystart,\n        xend,   ystart,\n        xstart, yend,\n        xstart, yend,\n        xend,   ystart,\n        xend,   yend,\n    ];\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.useProgram(program);\n    gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\n\n    gl.enableVertexAttribArray(positionAttributeLocation);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const size = 2;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n\n    const primitiveType = gl.TRIANGLES;\n    const count = 6;\n    gl.drawArrays(primitiveType, offset, count);\n};\nmain();\n\n\n\n\n// const ecs = new ECS();\n\n// const Position = ecs.CreateComponent(types.uint32);\n// const Direction = ecs.CreateComponent(types.uint32);\n\n// const Translate = ecs.CreateGroup(Position, Direction);\n\n// const Transform = ecs.CreateSystem(Translate, (entities, Pos) => {\n//     entities.forEach(element => {\n//         console.log(Pos[element]);\n//     });\n// });\n\n// ecs.CreateEntity(Translate);\n\n// transform();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,UAAU;AAChB,MAAM,UAAU;AAEhB,MAAM,SAAS,YAAU;AACrB,UAAM,eAAe,SAAS,KAAK;AACnC,UAAM,gBAAgB,SAAS,KAAK;AAEpC,QAAI,OAAO,SAAS,gBAChB,OAAO,UAAU,eAAe;AAElC,aAAO,QAAQ;AACf,aAAO,SAAS;AAAA;AAAA;AAItB,SAAO,iBAAiB,UAAU,MAAM;AACpC,WAAO,SAAS,eAAe;AAAA,KAChC;AAEH,MAAM,eAAe,CAAC,IAAI,MAAM,WAAW;AACvC,UAAM,SAAS,GAAG,aAAa;AAC/B,OAAG,aAAa,QAAQ;AACxB,OAAG,cAAc;AACjB,UAAM,UAAU,GAAG,mBAAmB,QAAQ,GAAG;AACjD,QAAI,SAAS;AACT,aAAO;AAAA;AAEX,YAAQ,IAAI;AACZ,OAAG,aAAa;AAAA;AAGpB,MAAM,gBAAgB,CAAC,IAAI,cAAc,mBAAmB;AACxD,UAAM,UAAU,GAAG;AACnB,OAAG,aAAa,SAAS;AACzB,OAAG,aAAa,SAAS;AACzB,OAAG,YAAY;AACf,UAAM,UAAU,GAAG,oBAAoB,SAAS,GAAG;AACnD,QAAI,SAAS;AACT,aAAO;AAAA;AAEX,YAAQ,IAAI;AACZ,OAAG,cAAc;AAAA;AAGrB,MAAM,OAAO,MAAM;AACf,UAAM,SAAS,SAAS,cAAc;AACtC,UAAM,KAAK,OAAO,WAAW;AAC7B,WAAO;AAEP,UAAM,eAAe,aAAa,IAAI,GAAG,eAAe;AACxD,UAAM,iBAAiB,aAAa,IAAI,GAAG,iBAAiB;AAE5D,UAAM,UAAU,cAAc,IAAI,cAAc;AAChD,UAAM,4BAA4B,GAAG,kBAAkB,SAAS;AAChE,UAAM,4BAA4B,GAAG,mBAAmB,SAAS;AAEjE,UAAM,iBAAiB,GAAG;AAC1B,OAAG,WAAW,GAAG,cAAc;AAE/B,UAAM,SAAS;AACf,UAAM,SAAS;AACf,UAAM,OAAO,OAAO;AACpB,UAAM,OAAO,OAAO;AAEpB,UAAM,YAAY;AAAA,MACd;AAAA,MAAQ;AAAA,MACR;AAAA,MAAQ;AAAA,MACR;AAAA,MAAQ;AAAA,MACR;AAAA,MAAQ;AAAA,MACR;AAAA,MAAQ;AAAA,MACR;AAAA,MAAQ;AAAA;AAGZ,OAAG,WAAW,GAAG,cAAc,IAAI,aAAa,YAAY,GAAG;AAE/D,OAAG,SAAS,GAAG,GAAG,GAAG,OAAO,OAAO,GAAG,OAAO;AAE7C,OAAG,WAAW,GAAG,GAAG,GAAG;AACvB,OAAG,MAAM,GAAG;AAEZ,OAAG,WAAW;AACd,OAAG,UAAU,2BAA2B,GAAG,OAAO,OAAO,GAAG,OAAO;AAEnE,OAAG,wBAAwB;AAE3B,OAAG,WAAW,GAAG,cAAc;AAE/B,UAAM,OAAO;AACb,UAAM,OAAO,GAAG;AAChB,UAAM,YAAY;AAClB,UAAM,SAAS;AACf,UAAM,SAAS;AACf,OAAG,oBAAoB,2BAA2B,MAAM,MAAM,WAAW,QAAQ;AAEjF,UAAM,gBAAgB,GAAG;AACzB,UAAM,QAAQ;AACd,OAAG,WAAW,eAAe,QAAQ;AAAA;AAEzC;",
  "names": []
}
