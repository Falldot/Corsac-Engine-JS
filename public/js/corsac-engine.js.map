{
  "version": 3,
  "sources": ["../../src/corsac-engine.js"],
  "sourcesContent": ["//const {ECS, types} = require(\"./ECS\");\r\n\r\nconst shader1 = require(\"./shader1.glsl\");\r\nconst shader2 = require(\"./shader2.glsl\");\r\n\r\nconst resize = canvas => {\r\n    const displayWidth = document.body.clientWidth;\r\n    const displayHeight = document.body.clientHeight;\r\n\r\n    if (canvas.width != displayWidth ||\r\n        canvas.height != displayHeight) {\r\n\r\n      canvas.width = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n};\r\n\r\nwindow.addEventListener(`resize`, () => {\r\n    resize(document.getElementById(\"root\"));\r\n}, false);\r\n\r\nconst createShader = (gl, type, source) => {\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (success) {\r\n        return shader;\r\n    }\r\n    console.log(\"error\");\r\n    gl.deleteShader(shader);\r\n};\r\n\r\nconst createProgram = (gl, vertexShader, fragmentShader) => {\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (success) {\r\n        return program;\r\n    }\r\n    console.log(\"error\");\r\n    gl.deleteProgram(program);\r\n};\r\n\r\nconst CreateRect = (gl, colorUniform, positions, color) => {\r\n    gl.uniform4f(colorUniform, color[0], color[1], color[2], color[3]);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n};\r\n\r\nconst CreateColor = (r, g, b, a) => [\r\n    r / 255,\r\n    g / 255,\r\n    b / 255,\r\n    a / 255\r\n];\r\n\r\nconst CreatePositon = (xstart, ystart, xend, yend) => [\r\n    xstart, ystart,\r\n    xend,   ystart,\r\n    xstart, yend,\r\n    xstart, yend,\r\n    xend,   ystart,\r\n    xend,   yend,\r\n];\r\n\r\n\r\n\r\nconst main = () => {\r\n    const canvas = document.querySelector(\"#root\");\r\n    const gl = canvas.getContext(\"webgl\");\r\n    resize(canvas);\r\n\r\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, shader1);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, shader2);\r\n\r\n    const program = createProgram(gl, vertexShader, fragmentShader);\r\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\r\n    const resolutionUniformLocation = gl.getUniformLocation(program, \"u_resolution\");\r\n    const colorUniformLocation = gl.getUniformLocation(program, \"u_color\");\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    const xstart = 0;\r\n    const ystart = 0;\r\n    const xend = canvas.width;\r\n    const yend = canvas.height;\r\n\r\n    const positions = [\r\n        xstart, ystart,\r\n        xend,   ystart,\r\n        xstart, yend,\r\n        xstart, yend,\r\n        xend,   ystart,\r\n        xend,   yend,\r\n    ];\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0, 0, 0, 0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    gl.useProgram(program);\r\n    gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n    gl.uniform4f(colorUniformLocation, 1, 0, 0, 1);\r\n    const color = CreateColor(200, 144, 244, 255);\r\n    const pos  = CreatePositon(0, 0, 466, 200);\r\n    CreateRect(gl, colorUniformLocation, pos, color);\r\n    const color2 = CreateColor(100, 100, 225, 255);\r\n    const pos2  = CreatePositon(500, 500, 600, 600);\r\n    CreateRect(gl, colorUniformLocation, pos2, color2);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    const size = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n    const primitiveType = gl.TRIANGLES;\r\n    const count = 6;\r\n    gl.drawArrays(primitiveType, offset, count);\r\n};\r\nmain();\r\n\r\n\r\n\r\n\r\n// const ecs = new ECS();\r\n\r\n// const Position = ecs.CreateComponent(types.uint32);\r\n// const Direction = ecs.CreateComponent(types.uint32);\r\n\r\n// const Translate = ecs.CreateGroup(Position, Direction);\r\n\r\n// const Transform = ecs.CreateSystem(Translate, (entities, Pos) => {\r\n//     entities.forEach(element => {\r\n//         console.log(Pos[element]);\r\n//     });\r\n// });\r\n\r\n// ecs.CreateEntity(Translate);\r\n\r\n// transform();\r\n"],
  "mappings": "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",
  "names": []
}
